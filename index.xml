<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Boomerang</title><link>https://ajtl.github.io/</link><description>Recent content on Boomerang</description><generator>Hugo -- gohugo.io</generator><copyright>&amp;copy; 2019-2021. All rights reserved.</copyright><lastBuildDate>Wed, 17 Mar 2021 16:13:50 +0800</lastBuildDate><atom:link href="https://ajtl.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>https://ajtl.github.io/about/</link><pubDate>Wed, 21 Apr 2021 17:35:20 +0800</pubDate><guid>https://ajtl.github.io/about/</guid><description>AJTL Software Engineer skills: C/C++ 📍China Have questions or suggestions? Feel free to open an issue on GitHub .
Thanks for reading!</description></item><item><title>Contact</title><link>https://ajtl.github.io/contact/</link><pubDate>Wed, 21 Apr 2021 17:35:15 +0800</pubDate><guid>https://ajtl.github.io/contact/</guid><description>link 🔗</description></item><item><title>Git Commit Message 规范设置</title><link>https://ajtl.github.io/post/git_commit_manager/</link><pubDate>Wed, 17 Mar 2021 16:13:50 +0800</pubDate><guid>https://ajtl.github.io/post/git_commit_manager/</guid><description>Chapter 1 简介 规范的进行 Git 提交有助于团队的开发管理。
符合规范的提交内容也能通过自动化脚本自动生成 changlog。
Chapter 2 准备工作 安装 Git 安装 Node.Js1 Chapter 3 提交格式 每一个提交都由header(标题)、body(内容)和footer(页脚)组成。其中header还包括了 type 、scope 和 subject，如下图所示：
&amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;subject&amp;gt; &amp;lt;BLANK-LINE&amp;gt; &amp;lt;body&amp;gt; &amp;lt;BLANK-LINE&amp;gt; &amp;lt;footer&amp;gt; 标题部分: type、scope、subject type 必需 type 表示提交类别，比如是修复一个 bug 还是增加一个新的 feature。
feat 添加新特性 fix 修复漏洞 docs 仅仅修改了文档，比如 README, CHANGELOG, CONTRIBUTE 等等 style 仅仅修改了空格、格式缩进、逗号等等，不改变代码逻辑 refactor 代码重构，没有加新功能或者修复漏洞 perf 优化相关，比如提升性能、体验 test 增加测试用例，包括单元测试、集成测试等 chore 改变构建流程、或者增加依赖库、工具等 revert 回滚到之前某一版本 scope 可选 scope 表示修改范围，建议填写影响的功能模块。</description></item><item><title>为什么python中的list和tuple是有序的</title><link>https://ajtl.github.io/post/python_list_and_tuple_are_orderd/</link><pubDate>Thu, 10 Oct 2019 19:08:15 +0800</pubDate><guid>https://ajtl.github.io/post/python_list_and_tuple_are_orderd/</guid><description>What does it mean in Python that tuples and lists are ordered, but dictionaries are not ordered? - Qura
Suppose, we have initialised a list L. And it consists of numbers in it. List looks something like 照例，我们来初始化一个list L并赋一些值在里面。
L=[1, 2, 3, 4, 5] Now, Try doing the following and see the result. 现在 执行下面一些操作并查看结果。将list元素按照索引print到console。
print(L) print(L[0], L[1], L[2], L[3], L[4]) Similarly, let’s initialise a dictionary D 同样的，初始化一个字典 D
D={&amp;#39;Maharashtra&amp;#39;: &amp;#39;Mumbai&amp;#39;, &amp;#39;Rajasthan&amp;#39;: &amp;#39;Jaipur&amp;#39;, &amp;#39;Karnataka&amp;#39;: &amp;#39;Bengaluru&amp;#39;} Likewise, do 执行和list一样的操作，将字典print到console</description></item><item><title>解决brew cask软件更新</title><link>https://ajtl.github.io/post/hmoebrew_caskupgrade/</link><pubDate>Tue, 25 Jun 2019 10:13:41 +0800</pubDate><guid>https://ajtl.github.io/post/hmoebrew_caskupgrade/</guid><description>关于Homebrew/Homebrew Cask Homebrew是现如今在Mac平台下较为流行的包管理工具，用以简化 macOS 上的软件安装过程。
项目主页：https://brew.sh GitHub地址：https://github.com/Homebrew
Homebrew Cask是 Homebrew的扩展，借助它可以方便地在 macOS 上安装图形界面程序，即我们常用的各类应用。
但是在实际使用过程中发现cask 更新命令很难达到更新的效果。
brew cask upgrade 最后发现有这样一个方法buo/cask-upgrade
brew cu buo/cask-upgrade这个项目是用来更新通过brew cask安装的每一个过时的APP。 它替代了原生的upgrade命令，提供了更为人性化的细节展示。
GitHub地址：https://github.com/buo/homebrew-cask-upgrade
使用brew cu 安装 brew tap buo/cask-upgrade 使用 更新所有过时APP:
brew cu 更新指定的APP:
brew cu [CASK] 带参更新指定的APP:
brew cu [CASK] [options] 当运行brew cu命令又不带任何参数时，该命令会自动运行brew update获取软件的最新版本。
brew cu 参数 输入
brew help cu 可以获得命令行的文档帮助
Usage: brew cu [CASK] [options] -a, --all Include apps that auto-update in the upgrade.</description></item><item><title>LongestPalindromicSubstring/最长回文子串</title><link>https://ajtl.github.io/post/leetcode_longest_palindromic_substring/</link><pubDate>Thu, 20 Jun 2019 17:44:44 +0800</pubDate><guid>https://ajtl.github.io/post/leetcode_longest_palindromic_substring/</guid><description>题目 给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。
示例 1：
输入: &amp;ldquo;babad&amp;rdquo;
输出: &amp;ldquo;bab&amp;rdquo;
注意: &amp;ldquo;aba&amp;rdquo; 也是一个有效答案。
示例 2：
输入: &amp;ldquo;cbbd&amp;rdquo;
输出: &amp;ldquo;bb&amp;rdquo;
题目链接 CH: https://leetcode-cn.com/problems/longest-palindromic-substring/ EN: https://leetcode.com/problems/longest-palindromic-substring/ 解法一 解法二 总结</description></item><item><title>ThreeSum/三数之和</title><link>https://ajtl.github.io/post/leetcode_three_sum/</link><pubDate>Tue, 18 Jun 2019 10:37:56 +0800</pubDate><guid>https://ajtl.github.io/post/leetcode_three_sum/</guid><description>题目 给定一个包含n 个整数的数组 nums，判断 nums 中是否存在三个元素a ，b ，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。
注意：答案中不可以包含重复的三元组。
示例:
给定数组 nums = [-1, 0, 1, 2, -1, -4]，
满足要求的三元组集合为： [ [-1, 0, 1], [-1, -1, 2] ]
题目链接 CH: https://leetcode-cn.com/problems/3sum/ EN: https://leetcode.com/problems/3sum/ 解法一 vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; threeSum(vector&amp;lt;int&amp;gt; &amp;amp;nums) { vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; vResult; for (size_t i = 0; i &amp;lt; nums.size()-2; i++) { for (size_t j = i+1; j &amp;lt; nums.</description></item><item><title>TwoSum/两数之和</title><link>https://ajtl.github.io/post/leetcode_two_sum/</link><pubDate>Mon, 17 Jun 2019 11:08:34 +0800</pubDate><guid>https://ajtl.github.io/post/leetcode_two_sum/</guid><description>题目 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。
你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。
示例:
给定 nums = [2, 7, 11, 15], target = 9
因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1]
题目链接 CH: https://leetcode-cn.com/problems/two-sum/ EN: https://leetcode.com/problems/two-sum/ 解法一 双重循环，时间复杂度是O(n^2)
vector&amp;lt;int&amp;gt; twoSum(vector&amp;lt;int&amp;gt; &amp;amp;nums, int target) { vector&amp;lt;int&amp;gt; vRes; for (size_t i = 0; i &amp;lt; nums.size() - 1; i++) { for (size_t j = i + 1; j &amp;lt; nums.</description></item><item><title>C++ delete this</title><link>https://ajtl.github.io/post/cpp_delete_this/</link><pubDate>Sat, 01 Jun 2019 16:54:49 +0800</pubDate><guid>https://ajtl.github.io/post/cpp_delete_this/</guid><description>C++中delete this的注意事项 你必须100%绝对确保this对象是通过new分配的（不是通过new[]，不是placement new，不是栈上的局部对象，不是全局对象，不是另一个对象的数据成员；仅仅只是通过原始的new运算符）
你必须100%绝对确保调用delete this操作的成员函数是最后调用的成员函数
你必须100%绝对确保在当前函数中delete this后，调用的其他成员函数不会读取this对象。
你必须100%确保再也不会使用this指针。即使你使用this指针和其他指针比较，例如nullptr，打印this指针，转换this指针等等。
delete this语句其实比较危险，在不同的编译器也会有不同的输出结果。最好私有化该类的构造函数，另外提供create函数。</description></item><item><title>Docker 从入门到实践</title><link>https://ajtl.github.io/post/docker_introduction/</link><pubDate>Fri, 24 May 2019 14:28:54 +0800</pubDate><guid>https://ajtl.github.io/post/docker_introduction/</guid><description>update on 20:31 28/5/2019
source site Docker 从入门到实践.mindnote Docker 简介 什么是 Docker 使用Go进行开发实现 基于Linux内核,对进程进行封装隔离 操作系统层面的虚拟化技术 Docker 优势 更高效的利用系统 更快速的启动时间 一致的运行环境 持续交付和部署 更轻松的迁移 更轻松的维护和扩展 基本概念 镜像 Image 一个类root 文件系统 提供运行所需文件及配置参数 不包含任何动态数据 在构建后不会被改变 分层存储，使得镜像的复用、定制更容易 容器 Container 镜像运行的实体 基于镜像 创建存储层 仓库 Repository 存储镜像 一个dock registry 包含多个仓库 一个仓库包含多个镜像 通过&amp;lt;仓库名&amp;gt;:&amp;lt;标签&amp;gt;指定镜像 安装Docker CE 社区版 Stable 6months Test Nightly EE 企业版 配置镜像加速器 使用镜像 获取镜像 docker pull</description></item><item><title>Hello World</title><link>https://ajtl.github.io/post/first_post/</link><pubDate>Fri, 17 May 2019 13:59:27 +0800</pubDate><guid>https://ajtl.github.io/post/first_post/</guid><description>Hello World 😄</description></item></channel></rss>