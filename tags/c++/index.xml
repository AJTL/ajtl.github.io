<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>c++ on Boomerang</title><link>https://ajtl.github.io/tags/c++/</link><description>Recent content in c++ on Boomerang</description><generator>Hugo -- gohugo.io</generator><copyright>&amp;copy; 2019-2021. All rights reserved.</copyright><lastBuildDate>Thu, 20 Jun 2019 17:44:44 +0800</lastBuildDate><atom:link href="https://ajtl.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml"/><item><title>LongestPalindromicSubstring/最长回文子串</title><link>https://ajtl.github.io/post/leetcode_longest_palindromic_substring/</link><pubDate>Thu, 20 Jun 2019 17:44:44 +0800</pubDate><guid>https://ajtl.github.io/post/leetcode_longest_palindromic_substring/</guid><description>题目 给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。
示例 1：
输入: &amp;ldquo;babad&amp;rdquo;
输出: &amp;ldquo;bab&amp;rdquo;
注意: &amp;ldquo;aba&amp;rdquo; 也是一个有效答案。
示例 2：
输入: &amp;ldquo;cbbd&amp;rdquo;
输出: &amp;ldquo;bb&amp;rdquo;
题目链接 CH: https://leetcode-cn.com/problems/longest-palindromic-substring/ EN: https://leetcode.com/problems/longest-palindromic-substring/ 解法一 解法二 总结</description></item><item><title>ThreeSum/三数之和</title><link>https://ajtl.github.io/post/leetcode_three_sum/</link><pubDate>Tue, 18 Jun 2019 10:37:56 +0800</pubDate><guid>https://ajtl.github.io/post/leetcode_three_sum/</guid><description>题目 给定一个包含n 个整数的数组 nums，判断 nums 中是否存在三个元素a ，b ，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。
注意：答案中不可以包含重复的三元组。
示例:
给定数组 nums = [-1, 0, 1, 2, -1, -4]，
满足要求的三元组集合为： [ [-1, 0, 1], [-1, -1, 2] ]
题目链接 CH: https://leetcode-cn.com/problems/3sum/ EN: https://leetcode.com/problems/3sum/ 解法一 vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; threeSum(vector&amp;lt;int&amp;gt; &amp;amp;nums) { vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; vResult; for (size_t i = 0; i &amp;lt; nums.size()-2; i++) { for (size_t j = i+1; j &amp;lt; nums.</description></item><item><title>TwoSum/两数之和</title><link>https://ajtl.github.io/post/leetcode_two_sum/</link><pubDate>Mon, 17 Jun 2019 11:08:34 +0800</pubDate><guid>https://ajtl.github.io/post/leetcode_two_sum/</guid><description>题目 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。
你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。
示例:
给定 nums = [2, 7, 11, 15], target = 9
因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1]
题目链接 CH: https://leetcode-cn.com/problems/two-sum/ EN: https://leetcode.com/problems/two-sum/ 解法一 双重循环，时间复杂度是O(n^2)
vector&amp;lt;int&amp;gt; twoSum(vector&amp;lt;int&amp;gt; &amp;amp;nums, int target) { vector&amp;lt;int&amp;gt; vRes; for (size_t i = 0; i &amp;lt; nums.size() - 1; i++) { for (size_t j = i + 1; j &amp;lt; nums.</description></item><item><title>C++ delete this</title><link>https://ajtl.github.io/post/cpp_delete_this/</link><pubDate>Sat, 01 Jun 2019 16:54:49 +0800</pubDate><guid>https://ajtl.github.io/post/cpp_delete_this/</guid><description>C++中delete this的注意事项 你必须100%绝对确保this对象是通过new分配的（不是通过new[]，不是placement new，不是栈上的局部对象，不是全局对象，不是另一个对象的数据成员；仅仅只是通过原始的new运算符）
你必须100%绝对确保调用delete this操作的成员函数是最后调用的成员函数
你必须100%绝对确保在当前函数中delete this后，调用的其他成员函数不会读取this对象。
你必须100%确保再也不会使用this指针。即使你使用this指针和其他指针比较，例如nullptr，打印this指针，转换this指针等等。
delete this语句其实比较危险，在不同的编译器也会有不同的输出结果。最好私有化该类的构造函数，另外提供create函数。</description></item></channel></rss>